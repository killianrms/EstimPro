const { Pool } = require('pg');

// Configuration de la connexion PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

const initDatabase = async () => {
  try {
    console.log('üîÑ Initialisation de la base de donn√©es PostgreSQL...');
    
    // Test de connexion
    try {
      const testResult = await pool.query('SELECT NOW()');
      console.log('‚úÖ Connexion PostgreSQL r√©ussie:', testResult.rows[0].now);
    } catch (connError) {
      console.error('‚ùå Erreur de connexion PostgreSQL:', connError.message);
      throw connError;
    }
    
    // Cr√©ation de la table estimations
    await pool.query(`
      CREATE TABLE IF NOT EXISTS estimations (
        id SERIAL PRIMARY KEY,
        address TEXT NOT NULL,
        propertyType TEXT NOT NULL,
        surface INTEGER NOT NULL,
        rooms TEXT,
        bedrooms TEXT,
        floor TEXT,
        dpe TEXT,
        condition TEXT NOT NULL,
        estimationReason TEXT,
        projectTimeline TEXT,
        year TEXT,
        firstName TEXT NOT NULL,
        lastName TEXT NOT NULL,
        email TEXT NOT NULL,
        phone TEXT NOT NULL,
        estimatedPrice INTEGER NOT NULL,
        estimatedPriceMax INTEGER NOT NULL,
        pricePerSqm INTEGER NOT NULL,
        city TEXT,
        postalCode TEXT,
        status TEXT DEFAULT 'nouveau',
        processedAt TIMESTAMP,
        notes TEXT,
        createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        balconsCount INTEGER DEFAULT 0,
        terrassesCount INTEGER DEFAULT 0,
        cavesCount INTEGER DEFAULT 0,
        garagesCount INTEGER DEFAULT 0,
        boxesCount INTEGER DEFAULT 0,
        parkingCount INTEGER DEFAULT 0,
        elevator TEXT,
        multiFloor TEXT,
        workNeeded TEXT,
        importantWorkTypes TEXT,
        refreshmentWorkTypes TEXT,
        exteriorSizes TEXT
      )
    `);

    // Cr√©ation de la table price_data
    await pool.query(`
      CREATE TABLE IF NOT EXISTS price_data (
        id SERIAL PRIMARY KEY,
        city TEXT NOT NULL,
        postalCode TEXT,
        pricePerSqm INTEGER NOT NULL,
        propertyType TEXT NOT NULL,
        lastUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // Migration: Correction du type de la colonne year si n√©cessaire
    try {
      await pool.query(`
        ALTER TABLE estimations 
        ALTER COLUMN year TYPE TEXT;
      `);
      console.log('Colonne year migr√©e vers TEXT');
    } catch (migrationError) {
      // Ignorer l'erreur si la colonne est d√©j√† du bon type
      if (!migrationError.message.includes('cannot alter type')) {
        console.log('Migration year non n√©cessaire ou d√©j√† effectu√©e');
      }
    }

    // Insertion des donn√©es de prix par d√©faut
    await insertDefaultPriceData();
    
    // V√©rification que les tables existent
    const tablesCheck = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('estimations', 'price_data')
    `);
    console.log('üìä Tables cr√©√©es:', tablesCheck.rows.map(r => r.table_name).join(', '));
    
    // Compter les enregistrements existants
    const estimationsCount = await pool.query('SELECT COUNT(*) FROM estimations');
    const priceDataCount = await pool.query('SELECT COUNT(*) FROM price_data');
    console.log(`üìà Donn√©es existantes: ${estimationsCount.rows[0].count} estimations, ${priceDataCount.rows[0].count} prix`);
    
    console.log('‚úÖ Base de donn√©es PostgreSQL initialis√©e avec succ√®s');
  } catch (error) {
    console.error('Erreur lors de l\'initialisation de la base de donn√©es:', error);
    throw error;
  }
};

const insertDefaultPriceData = async () => {
  try {
    // V√©rifier si des donn√©es existent d√©j√†
    const result = await pool.query('SELECT COUNT(*) FROM price_data');
    const count = parseInt(result.rows[0].count);
    
    console.log(`üìä Nombre de prix existants: ${count}`);
    
    if (count === 0) {
      console.log('üìù Insertion des donn√©es de prix par d√©faut...');
      const defaultPrices = [
        { city: 'Paris', postalCode: '75001', pricePerSqm: 12000, propertyType: 'appartement' },
        { city: 'Paris', postalCode: '75001', pricePerSqm: 11000, propertyType: 'maison' },
        { city: 'Paris', postalCode: '75016', pricePerSqm: 11500, propertyType: 'appartement' },
        { city: 'Paris', postalCode: '75016', pricePerSqm: 10500, propertyType: 'maison' },
        { city: 'Paris', postalCode: '75020', pricePerSqm: 8500, propertyType: 'appartement' },
        { city: 'Paris', postalCode: '75020', pricePerSqm: 8000, propertyType: 'maison' },
        { city: 'Lyon', postalCode: '69001', pricePerSqm: 5500, propertyType: 'appartement' },
        { city: 'Lyon', postalCode: '69001', pricePerSqm: 5000, propertyType: 'maison' },
        { city: 'Lyon', postalCode: '69002', pricePerSqm: 6000, propertyType: 'appartement' },
        { city: 'Lyon', postalCode: '69002', pricePerSqm: 5500, propertyType: 'maison' },
        { city: 'Marseille', postalCode: '13001', pricePerSqm: 4000, propertyType: 'appartement' },
        { city: 'Marseille', postalCode: '13001', pricePerSqm: 3800, propertyType: 'maison' },
        { city: 'Marseille', postalCode: '13008', pricePerSqm: 4500, propertyType: 'appartement' },
        { city: 'Marseille', postalCode: '13008', pricePerSqm: 4200, propertyType: 'maison' },
        { city: 'Toulouse', postalCode: '31000', pricePerSqm: 3800, propertyType: 'appartement' },
        { city: 'Toulouse', postalCode: '31000', pricePerSqm: 3500, propertyType: 'maison' },
        { city: 'Nice', postalCode: '06000', pricePerSqm: 5200, propertyType: 'appartement' },
        { city: 'Nice', postalCode: '06000', pricePerSqm: 4800, propertyType: 'maison' },
        { city: 'Nantes', postalCode: '44000', pricePerSqm: 4200, propertyType: 'appartement' },
        { city: 'Nantes', postalCode: '44000', pricePerSqm: 3900, propertyType: 'maison' },
        { city: 'Strasbourg', postalCode: '67000', pricePerSqm: 3600, propertyType: 'appartement' },
        { city: 'Strasbourg', postalCode: '67000', pricePerSqm: 3300, propertyType: 'maison' },
        { city: 'Montpellier', postalCode: '34000', pricePerSqm: 4100, propertyType: 'appartement' },
        { city: 'Montpellier', postalCode: '34000', pricePerSqm: 3800, propertyType: 'maison' },
        { city: 'Bordeaux', postalCode: '33000', pricePerSqm: 4800, propertyType: 'appartement' },
        { city: 'Bordeaux', postalCode: '33000', pricePerSqm: 4400, propertyType: 'maison' },
        { city: 'Lille', postalCode: '59000', pricePerSqm: 3200, propertyType: 'appartement' },
        { city: 'Lille', postalCode: '59000', pricePerSqm: 2900, propertyType: 'maison' },
        { city: 'Rennes', postalCode: '35000', pricePerSqm: 3700, propertyType: 'appartement' },
        { city: 'Rennes', postalCode: '35000', pricePerSqm: 3400, propertyType: 'maison' },
        
        // Terrains
        { city: 'Paris', postalCode: '75001', pricePerSqm: 8000, propertyType: 'terrain' },
        { city: 'Lyon', postalCode: '69001', pricePerSqm: 2500, propertyType: 'terrain' },
        { city: 'Marseille', postalCode: '13001', pricePerSqm: 1800, propertyType: 'terrain' },
        { city: 'Toulouse', postalCode: '31000', pricePerSqm: 1500, propertyType: 'terrain' },
        { city: 'Nice', postalCode: '06000', pricePerSqm: 2200, propertyType: 'terrain' },
        { city: 'Nantes', postalCode: '44000', pricePerSqm: 1600, propertyType: 'terrain' },
        { city: 'Bordeaux', postalCode: '33000', pricePerSqm: 1800, propertyType: 'terrain' },
        
        // Immeubles
        { city: 'Paris', postalCode: '75001', pricePerSqm: 10000, propertyType: 'immeuble' },
        { city: 'Lyon', postalCode: '69001', pricePerSqm: 4500, propertyType: 'immeuble' },
        { city: 'Marseille', postalCode: '13001', pricePerSqm: 3200, propertyType: 'immeuble' },
        { city: 'Toulouse', postalCode: '31000', pricePerSqm: 3000, propertyType: 'immeuble' },
        { city: 'Nice', postalCode: '06000', pricePerSqm: 4200, propertyType: 'immeuble' },
        
        // Commerces
        { city: 'Paris', postalCode: '75001', pricePerSqm: 15000, propertyType: 'commerce' },
        { city: 'Lyon', postalCode: '69001', pricePerSqm: 6000, propertyType: 'commerce' },
        { city: 'Marseille', postalCode: '13001', pricePerSqm: 4500, propertyType: 'commerce' },
        { city: 'Toulouse', postalCode: '31000', pricePerSqm: 4000, propertyType: 'commerce' },
        { city: 'Nice', postalCode: '06000', pricePerSqm: 5500, propertyType: 'commerce' }
      ];

      // Insertion en batch
      for (const price of defaultPrices) {
        await pool.query(
          'INSERT INTO price_data (city, postalCode, pricePerSqm, propertyType) VALUES ($1, $2, $3, $4)',
          [price.city, price.postalCode, price.pricePerSqm, price.propertyType]
        );
      }
      
      console.log(`‚úÖ ${defaultPrices.length} donn√©es de prix par d√©faut ins√©r√©es`);
    } else {
      console.log('‚ÑπÔ∏è Les donn√©es de prix existent d√©j√†, pas d\'insertion');
    }
  } catch (error) {
    console.error('Erreur lors de l\'insertion des donn√©es de prix:', error);
  }
};

module.exports = { pool, initDatabase };